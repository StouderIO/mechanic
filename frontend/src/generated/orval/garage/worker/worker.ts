/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  LocalGetWorkerInfoRequest,
  LocalGetWorkerVariableRequest,
  LocalListWorkersRequest,
  LocalSetWorkerVariableRequest,
  MultiResponseLocalGetWorkerInfoResponse,
  MultiResponseLocalGetWorkerVariableResponse,
  MultiResponseLocalListWorkersResponse,
  MultiResponseLocalSetWorkerVariableResponse,
} from '../endpoints.schemas'

/**
 * 
Get information about the specified background worker on one or several cluster nodes.
    
 */
export const getWorkerInfo = (
  localGetWorkerInfoRequest: LocalGetWorkerInfoRequest,
  signal?: AbortSignal,
) => {
  return customInstance<MultiResponseLocalGetWorkerInfoResponse>({
    url: `/proxy/v2/GetWorkerInfo`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: localGetWorkerInfoRequest,
    signal,
  })
}

export const getGetWorkerInfoMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWorkerInfo>>,
    TError,
    { data: LocalGetWorkerInfoRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getWorkerInfo>>,
  TError,
  { data: LocalGetWorkerInfoRequest },
  TContext
> => {
  const mutationKey = ['getWorkerInfo']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getWorkerInfo>>,
    { data: LocalGetWorkerInfoRequest }
  > = (props) => {
    const { data } = props ?? {}

    return getWorkerInfo(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetWorkerInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof getWorkerInfo>>
>
export type GetWorkerInfoMutationBody = LocalGetWorkerInfoRequest
export type GetWorkerInfoMutationError = ErrorType<void>

export const useGetWorkerInfo = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getWorkerInfo>>,
      TError,
      { data: LocalGetWorkerInfoRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getWorkerInfo>>,
  TError,
  { data: LocalGetWorkerInfoRequest },
  TContext
> => {
  const mutationOptions = getGetWorkerInfoMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
Fetch values of one or several worker variables, from one or several cluster nodes.
    
 */
export const getWorkerVariable = (
  localGetWorkerVariableRequest: LocalGetWorkerVariableRequest,
  signal?: AbortSignal,
) => {
  return customInstance<MultiResponseLocalGetWorkerVariableResponse>({
    url: `/proxy/v2/GetWorkerVariable`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: localGetWorkerVariableRequest,
    signal,
  })
}

export const getGetWorkerVariableMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWorkerVariable>>,
    TError,
    { data: LocalGetWorkerVariableRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getWorkerVariable>>,
  TError,
  { data: LocalGetWorkerVariableRequest },
  TContext
> => {
  const mutationKey = ['getWorkerVariable']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getWorkerVariable>>,
    { data: LocalGetWorkerVariableRequest }
  > = (props) => {
    const { data } = props ?? {}

    return getWorkerVariable(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetWorkerVariableMutationResult = NonNullable<
  Awaited<ReturnType<typeof getWorkerVariable>>
>
export type GetWorkerVariableMutationBody = LocalGetWorkerVariableRequest
export type GetWorkerVariableMutationError = ErrorType<void>

export const useGetWorkerVariable = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof getWorkerVariable>>,
      TError,
      { data: LocalGetWorkerVariableRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof getWorkerVariable>>,
  TError,
  { data: LocalGetWorkerVariableRequest },
  TContext
> => {
  const mutationOptions = getGetWorkerVariableMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
List background workers currently running on one or several cluster nodes.
    
 */
export const listWorkers = (
  localListWorkersRequest: LocalListWorkersRequest,
  signal?: AbortSignal,
) => {
  return customInstance<MultiResponseLocalListWorkersResponse>({
    url: `/proxy/v2/ListWorkers`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: localListWorkersRequest,
    signal,
  })
}

export const getListWorkersMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof listWorkers>>,
    TError,
    { data: LocalListWorkersRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof listWorkers>>,
  TError,
  { data: LocalListWorkersRequest },
  TContext
> => {
  const mutationKey = ['listWorkers']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof listWorkers>>,
    { data: LocalListWorkersRequest }
  > = (props) => {
    const { data } = props ?? {}

    return listWorkers(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ListWorkersMutationResult = NonNullable<
  Awaited<ReturnType<typeof listWorkers>>
>
export type ListWorkersMutationBody = LocalListWorkersRequest
export type ListWorkersMutationError = ErrorType<void>

export const useListWorkers = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof listWorkers>>,
      TError,
      { data: LocalListWorkersRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof listWorkers>>,
  TError,
  { data: LocalListWorkersRequest },
  TContext
> => {
  const mutationOptions = getListWorkersMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
Set the value for a worker variable, on one or several cluster nodes.
    
 */
export const setWorkerVariable = (
  localSetWorkerVariableRequest: LocalSetWorkerVariableRequest,
  signal?: AbortSignal,
) => {
  return customInstance<MultiResponseLocalSetWorkerVariableResponse>({
    url: `/proxy/v2/SetWorkerVariable`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: localSetWorkerVariableRequest,
    signal,
  })
}

export const getSetWorkerVariableMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setWorkerVariable>>,
    TError,
    { data: LocalSetWorkerVariableRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof setWorkerVariable>>,
  TError,
  { data: LocalSetWorkerVariableRequest },
  TContext
> => {
  const mutationKey = ['setWorkerVariable']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setWorkerVariable>>,
    { data: LocalSetWorkerVariableRequest }
  > = (props) => {
    const { data } = props ?? {}

    return setWorkerVariable(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetWorkerVariableMutationResult = NonNullable<
  Awaited<ReturnType<typeof setWorkerVariable>>
>
export type SetWorkerVariableMutationBody = LocalSetWorkerVariableRequest
export type SetWorkerVariableMutationError = ErrorType<void>

export const useSetWorkerVariable = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof setWorkerVariable>>,
      TError,
      { data: LocalSetWorkerVariableRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof setWorkerVariable>>,
  TError,
  { data: LocalSetWorkerVariableRequest },
  TContext
> => {
  const mutationOptions = getSetWorkerVariableMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
