/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  CreateAdminTokenResponse,
  DeleteAdminTokenParams,
  GetAdminTokenInfoParams,
  GetAdminTokenInfoResponse,
  ListAdminTokensResponse,
  UpdateAdminTokenRequestBody,
} from '../endpoints.schemas'

/**
 * Creates a new admin API token
 */
export const createAdminToken = (
  updateAdminTokenRequestBody: UpdateAdminTokenRequestBody,
  signal?: AbortSignal,
) => {
  return customInstance<CreateAdminTokenResponse>({
    url: `/proxy/v2/CreateAdminToken`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: updateAdminTokenRequestBody,
    signal,
  })
}

export const getCreateAdminTokenMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdminToken>>,
    TError,
    { data: UpdateAdminTokenRequestBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdminToken>>,
  TError,
  { data: UpdateAdminTokenRequestBody },
  TContext
> => {
  const mutationKey = ['createAdminToken']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdminToken>>,
    { data: UpdateAdminTokenRequestBody }
  > = (props) => {
    const { data } = props ?? {}

    return createAdminToken(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateAdminTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdminToken>>
>
export type CreateAdminTokenMutationBody = UpdateAdminTokenRequestBody
export type CreateAdminTokenMutationError = ErrorType<void>

export const useCreateAdminToken = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdminToken>>,
      TError,
      { data: UpdateAdminTokenRequestBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdminToken>>,
  TError,
  { data: UpdateAdminTokenRequestBody },
  TContext
> => {
  const mutationOptions = getCreateAdminTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Delete an admin API token from the cluster, revoking all its permissions.
 */
export const deleteAdminToken = (
  params: DeleteAdminTokenParams,
  signal?: AbortSignal,
) => {
  return customInstance<void>({
    url: `/proxy/v2/DeleteAdminToken`,
    method: 'POST',
    params,
    signal,
  })
}

export const getDeleteAdminTokenMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAdminToken>>,
    TError,
    { params: DeleteAdminTokenParams },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAdminToken>>,
  TError,
  { params: DeleteAdminTokenParams },
  TContext
> => {
  const mutationKey = ['deleteAdminToken']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAdminToken>>,
    { params: DeleteAdminTokenParams }
  > = (props) => {
    const { params } = props ?? {}

    return deleteAdminToken(params)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteAdminTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAdminToken>>
>

export type DeleteAdminTokenMutationError = ErrorType<void>

export const useDeleteAdminToken = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteAdminToken>>,
      TError,
      { params: DeleteAdminTokenParams },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteAdminToken>>,
  TError,
  { params: DeleteAdminTokenParams },
  TContext
> => {
  const mutationOptions = getDeleteAdminTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
Return information about a specific admin API token.
You can search by specifying the exact token identifier (`id`) or by specifying a pattern (`search`).
    
 */
export const getAdminTokenInfo = (
  params?: GetAdminTokenInfoParams,
  signal?: AbortSignal,
) => {
  return customInstance<GetAdminTokenInfoResponse>({
    url: `/proxy/v2/GetAdminTokenInfo`,
    method: 'GET',
    params,
    signal,
  })
}

export const getGetAdminTokenInfoQueryKey = (
  params?: GetAdminTokenInfoParams,
) => {
  return [`/proxy/v2/GetAdminTokenInfo`, ...(params ? [params] : [])] as const
}

export const getGetAdminTokenInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminTokenInfo>>,
  TError = ErrorType<void>,
>(
  params?: GetAdminTokenInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdminTokenInfo>>,
        TError,
        TData
      >
    >
  },
) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetAdminTokenInfoQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdminTokenInfo>>
  > = ({ signal }) => getAdminTokenInfo(params, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminTokenInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminTokenInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminTokenInfo>>
>
export type GetAdminTokenInfoQueryError = ErrorType<void>

export function useGetAdminTokenInfo<
  TData = Awaited<ReturnType<typeof getAdminTokenInfo>>,
  TError = ErrorType<void>,
>(
  params: undefined | GetAdminTokenInfoParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdminTokenInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminTokenInfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminTokenInfo>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAdminTokenInfo<
  TData = Awaited<ReturnType<typeof getAdminTokenInfo>>,
  TError = ErrorType<void>,
>(
  params?: GetAdminTokenInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdminTokenInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminTokenInfo>>,
          TError,
          Awaited<ReturnType<typeof getAdminTokenInfo>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetAdminTokenInfo<
  TData = Awaited<ReturnType<typeof getAdminTokenInfo>>,
  TError = ErrorType<void>,
>(
  params?: GetAdminTokenInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdminTokenInfo>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetAdminTokenInfo<
  TData = Awaited<ReturnType<typeof getAdminTokenInfo>>,
  TError = ErrorType<void>,
>(
  params?: GetAdminTokenInfoParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdminTokenInfo>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetAdminTokenInfoQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Returns all admin API tokens in the cluster.
 */
export const listAdminTokens = (signal?: AbortSignal) => {
  return customInstance<ListAdminTokensResponse>({
    url: `/proxy/v2/ListAdminTokens`,
    method: 'GET',
    signal,
  })
}

export const getListAdminTokensQueryKey = () => {
  return [`/proxy/v2/ListAdminTokens`] as const
}

export const getListAdminTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof listAdminTokens>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAdminTokens>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getListAdminTokensQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listAdminTokens>>> = ({
    signal,
  }) => listAdminTokens(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAdminTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAdminTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAdminTokens>>
>
export type ListAdminTokensQueryError = ErrorType<void>

export function useListAdminTokens<
  TData = Awaited<ReturnType<typeof listAdminTokens>>,
  TError = ErrorType<void>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAdminTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAdminTokens>>,
          TError,
          Awaited<ReturnType<typeof listAdminTokens>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAdminTokens<
  TData = Awaited<ReturnType<typeof listAdminTokens>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAdminTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAdminTokens>>,
          TError,
          Awaited<ReturnType<typeof listAdminTokens>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useListAdminTokens<
  TData = Awaited<ReturnType<typeof listAdminTokens>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAdminTokens>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useListAdminTokens<
  TData = Awaited<ReturnType<typeof listAdminTokens>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listAdminTokens>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getListAdminTokensQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * 
Updates information about the specified admin API token.
    
 */
export const updateAdminToken = (
  updateAdminTokenRequestBody: UpdateAdminTokenRequestBody,
  signal?: AbortSignal,
) => {
  return customInstance<GetAdminTokenInfoResponse>({
    url: `/proxy/v2/UpdateAdminToken`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: updateAdminTokenRequestBody,
    signal,
  })
}

export const getUpdateAdminTokenMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdminToken>>,
    TError,
    { data: UpdateAdminTokenRequestBody },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdminToken>>,
  TError,
  { data: UpdateAdminTokenRequestBody },
  TContext
> => {
  const mutationKey = ['updateAdminToken']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdminToken>>,
    { data: UpdateAdminTokenRequestBody }
  > = (props) => {
    const { data } = props ?? {}

    return updateAdminToken(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAdminTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdminToken>>
>
export type UpdateAdminTokenMutationBody = UpdateAdminTokenRequestBody
export type UpdateAdminTokenMutationError = ErrorType<void>

export const useUpdateAdminToken = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdminToken>>,
      TError,
      { data: UpdateAdminTokenRequestBody },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdminToken>>,
  TError,
  { data: UpdateAdminTokenRequestBody },
  TContext
> => {
  const mutationOptions = getUpdateAdminTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
