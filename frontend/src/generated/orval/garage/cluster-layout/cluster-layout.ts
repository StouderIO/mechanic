/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  ApplyClusterLayoutRequest,
  ApplyClusterLayoutResponse,
  ClusterLayoutSkipDeadNodesRequest,
  ClusterLayoutSkipDeadNodesResponse,
  GetClusterLayoutHistoryResponse,
  GetClusterLayoutResponse,
  PreviewClusterLayoutChangesResponse,
  UpdateClusterLayoutRequest,
} from '../endpoints.schemas'

/**
 * 
Applies to the cluster the layout changes currently registered as staged layout changes.

*Note: do not try to parse the `message` field of the response, it is given as an array of string specifically because its format is not stable.*
    
 */
export const applyClusterLayout = (
  applyClusterLayoutRequest: ApplyClusterLayoutRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ApplyClusterLayoutResponse>({
    url: `/proxy/v2/ApplyClusterLayout`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: applyClusterLayoutRequest,
    signal,
  })
}

export const getApplyClusterLayoutMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof applyClusterLayout>>,
    TError,
    { data: ApplyClusterLayoutRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof applyClusterLayout>>,
  TError,
  { data: ApplyClusterLayoutRequest },
  TContext
> => {
  const mutationKey = ['applyClusterLayout']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof applyClusterLayout>>,
    { data: ApplyClusterLayoutRequest }
  > = (props) => {
    const { data } = props ?? {}

    return applyClusterLayout(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ApplyClusterLayoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof applyClusterLayout>>
>
export type ApplyClusterLayoutMutationBody = ApplyClusterLayoutRequest
export type ApplyClusterLayoutMutationError = ErrorType<void>

export const useApplyClusterLayout = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof applyClusterLayout>>,
      TError,
      { data: ApplyClusterLayoutRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof applyClusterLayout>>,
  TError,
  { data: ApplyClusterLayoutRequest },
  TContext
> => {
  const mutationOptions = getApplyClusterLayoutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Force progress in layout update trackers
 */
export const clusterLayoutSkipDeadNodes = (
  clusterLayoutSkipDeadNodesRequest: ClusterLayoutSkipDeadNodesRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ClusterLayoutSkipDeadNodesResponse>({
    url: `/proxy/v2/ClusterLayoutSkipDeadNodes`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: clusterLayoutSkipDeadNodesRequest,
    signal,
  })
}

export const getClusterLayoutSkipDeadNodesMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>,
    TError,
    { data: ClusterLayoutSkipDeadNodesRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>,
  TError,
  { data: ClusterLayoutSkipDeadNodesRequest },
  TContext
> => {
  const mutationKey = ['clusterLayoutSkipDeadNodes']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>,
    { data: ClusterLayoutSkipDeadNodesRequest }
  > = (props) => {
    const { data } = props ?? {}

    return clusterLayoutSkipDeadNodes(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type ClusterLayoutSkipDeadNodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>
>
export type ClusterLayoutSkipDeadNodesMutationBody =
  ClusterLayoutSkipDeadNodesRequest
export type ClusterLayoutSkipDeadNodesMutationError = ErrorType<void>

export const useClusterLayoutSkipDeadNodes = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>,
      TError,
      { data: ClusterLayoutSkipDeadNodesRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof clusterLayoutSkipDeadNodes>>,
  TError,
  { data: ClusterLayoutSkipDeadNodesRequest },
  TContext
> => {
  const mutationOptions = getClusterLayoutSkipDeadNodesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
Returns the cluster's current layout, including:

- Currently configured cluster layout
- Staged changes to the cluster layout

*Capacity is given in bytes*
    
 */
export const getClusterLayout = (signal?: AbortSignal) => {
  return customInstance<GetClusterLayoutResponse>({
    url: `/proxy/v2/GetClusterLayout`,
    method: 'GET',
    signal,
  })
}

export const getGetClusterLayoutQueryKey = () => {
  return [`/proxy/v2/GetClusterLayout`] as const
}

export const getGetClusterLayoutQueryOptions = <
  TData = Awaited<ReturnType<typeof getClusterLayout>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getClusterLayout>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetClusterLayoutQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClusterLayout>>
  > = ({ signal }) => getClusterLayout(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClusterLayout>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterLayoutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClusterLayout>>
>
export type GetClusterLayoutQueryError = ErrorType<void>

export function useGetClusterLayout<
  TData = Awaited<ReturnType<typeof getClusterLayout>>,
  TError = ErrorType<void>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayout>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterLayout>>,
          TError,
          Awaited<ReturnType<typeof getClusterLayout>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterLayout<
  TData = Awaited<ReturnType<typeof getClusterLayout>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayout>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterLayout>>,
          TError,
          Awaited<ReturnType<typeof getClusterLayout>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterLayout<
  TData = Awaited<ReturnType<typeof getClusterLayout>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayout>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetClusterLayout<
  TData = Awaited<ReturnType<typeof getClusterLayout>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayout>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetClusterLayoutQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * 
Returns the history of layouts in the cluster
    
 */
export const getClusterLayoutHistory = (signal?: AbortSignal) => {
  return customInstance<GetClusterLayoutHistoryResponse>({
    url: `/proxy/v2/GetClusterLayoutHistory`,
    method: 'GET',
    signal,
  })
}

export const getGetClusterLayoutHistoryQueryKey = () => {
  return [`/proxy/v2/GetClusterLayoutHistory`] as const
}

export const getGetClusterLayoutHistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getClusterLayoutHistory>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getClusterLayoutHistory>>,
      TError,
      TData
    >
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetClusterLayoutHistoryQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClusterLayoutHistory>>
  > = ({ signal }) => getClusterLayoutHistory(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClusterLayoutHistory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterLayoutHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClusterLayoutHistory>>
>
export type GetClusterLayoutHistoryQueryError = ErrorType<void>

export function useGetClusterLayoutHistory<
  TData = Awaited<ReturnType<typeof getClusterLayoutHistory>>,
  TError = ErrorType<void>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayoutHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterLayoutHistory>>,
          TError,
          Awaited<ReturnType<typeof getClusterLayoutHistory>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterLayoutHistory<
  TData = Awaited<ReturnType<typeof getClusterLayoutHistory>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayoutHistory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterLayoutHistory>>,
          TError,
          Awaited<ReturnType<typeof getClusterLayoutHistory>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterLayoutHistory<
  TData = Awaited<ReturnType<typeof getClusterLayoutHistory>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayoutHistory>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetClusterLayoutHistory<
  TData = Awaited<ReturnType<typeof getClusterLayoutHistory>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterLayoutHistory>>,
        TError,
        TData
      >
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetClusterLayoutHistoryQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * 
Computes a new layout taking into account the staged parameters, and returns it with detailed statistics. The new layout is not applied in the cluster.

*Note: do not try to parse the `message` field of the response, it is given as an array of string specifically because its format is not stable.*
    
 */
export const previewClusterLayoutChanges = (signal?: AbortSignal) => {
  return customInstance<PreviewClusterLayoutChangesResponse>({
    url: `/proxy/v2/PreviewClusterLayoutChanges`,
    method: 'POST',
    signal,
  })
}

export const getPreviewClusterLayoutChangesMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof previewClusterLayoutChanges>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof previewClusterLayoutChanges>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['previewClusterLayoutChanges']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof previewClusterLayoutChanges>>,
    void
  > = () => {
    return previewClusterLayoutChanges()
  }

  return { mutationFn, ...mutationOptions }
}

export type PreviewClusterLayoutChangesMutationResult = NonNullable<
  Awaited<ReturnType<typeof previewClusterLayoutChanges>>
>

export type PreviewClusterLayoutChangesMutationError = ErrorType<void>

export const usePreviewClusterLayoutChanges = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof previewClusterLayoutChanges>>,
      TError,
      void,
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof previewClusterLayoutChanges>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPreviewClusterLayoutChangesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Clear staged layout changes
 */
export const revertClusterLayout = (signal?: AbortSignal) => {
  return customInstance<GetClusterLayoutResponse>({
    url: `/proxy/v2/RevertClusterLayout`,
    method: 'POST',
    signal,
  })
}

export const getRevertClusterLayoutMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof revertClusterLayout>>,
    TError,
    void,
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof revertClusterLayout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['revertClusterLayout']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof revertClusterLayout>>,
    void
  > = () => {
    return revertClusterLayout()
  }

  return { mutationFn, ...mutationOptions }
}

export type RevertClusterLayoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof revertClusterLayout>>
>

export type RevertClusterLayoutMutationError = ErrorType<void>

export const useRevertClusterLayout = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof revertClusterLayout>>,
      TError,
      void,
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof revertClusterLayout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRevertClusterLayoutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
Send modifications to the cluster layout. These modifications will be included in the staged role changes, visible in subsequent calls of `GET /GetClusterHealth`. Once the set of staged changes is satisfactory, the user may call `POST /ApplyClusterLayout` to apply the changed changes, or `POST /RevertClusterLayout` to clear all of the staged changes in the layout.

Setting the capacity to `null` will configure the node as a gateway.
Otherwise, capacity must be now set in bytes (before Garage 0.9 it was arbitrary weights).
For example to declare 100GB, you must set `capacity: 100000000000`.

Garage uses internally the International System of Units (SI), it assumes that 1kB = 1000 bytes, and displays storage as kB, MB, GB (and not KiB, MiB, GiB that assume 1KiB = 1024 bytes).
    
 */
export const updateClusterLayout = (
  updateClusterLayoutRequest: UpdateClusterLayoutRequest,
  signal?: AbortSignal,
) => {
  return customInstance<GetClusterLayoutResponse>({
    url: `/proxy/v2/UpdateClusterLayout`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: updateClusterLayoutRequest,
    signal,
  })
}

export const getUpdateClusterLayoutMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClusterLayout>>,
    TError,
    { data: UpdateClusterLayoutRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateClusterLayout>>,
  TError,
  { data: UpdateClusterLayoutRequest },
  TContext
> => {
  const mutationKey = ['updateClusterLayout']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateClusterLayout>>,
    { data: UpdateClusterLayoutRequest }
  > = (props) => {
    const { data } = props ?? {}

    return updateClusterLayout(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateClusterLayoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateClusterLayout>>
>
export type UpdateClusterLayoutMutationBody = UpdateClusterLayoutRequest
export type UpdateClusterLayoutMutationError = ErrorType<void>

export const useUpdateClusterLayout = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateClusterLayout>>,
      TError,
      { data: UpdateClusterLayoutRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateClusterLayout>>,
  TError,
  { data: UpdateClusterLayoutRequest },
  TContext
> => {
  const mutationOptions = getUpdateClusterLayoutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
