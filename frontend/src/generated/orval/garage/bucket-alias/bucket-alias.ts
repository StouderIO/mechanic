/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  AddBucketAliasRequest,
  GetBucketInfoResponse,
  RemoveBucketAliasRequest,
} from '../endpoints.schemas'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Add an alias for the target bucket.  This can be either a global or a local alias, depending on which fields are specified.
 */
export const addBucketAlias = (
  addBucketAliasRequest: AddBucketAliasRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetBucketInfoResponse>(
    {
      url: `/proxy/v2/AddBucketAlias`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addBucketAliasRequest,
      signal,
    },
    options,
  )
}

export const getAddBucketAliasMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addBucketAlias>>,
    TError,
    { data: AddBucketAliasRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof addBucketAlias>>,
  TError,
  { data: AddBucketAliasRequest },
  TContext
> => {
  const mutationKey = ['addBucketAlias']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addBucketAlias>>,
    { data: AddBucketAliasRequest }
  > = (props) => {
    const { data } = props ?? {}

    return addBucketAlias(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AddBucketAliasMutationResult = NonNullable<
  Awaited<ReturnType<typeof addBucketAlias>>
>
export type AddBucketAliasMutationBody = AddBucketAliasRequest
export type AddBucketAliasMutationError = ErrorType<void>

export const useAddBucketAlias = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addBucketAlias>>,
      TError,
      { data: AddBucketAliasRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof addBucketAlias>>,
  TError,
  { data: AddBucketAliasRequest },
  TContext
> => {
  const mutationOptions = getAddBucketAliasMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Remove an alias for the target bucket.  This can be either a global or a local alias, depending on which fields are specified.
 */
export const removeBucketAlias = (
  removeBucketAliasRequest: RemoveBucketAliasRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetBucketInfoResponse>(
    {
      url: `/proxy/v2/RemoveBucketAlias`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: removeBucketAliasRequest,
      signal,
    },
    options,
  )
}

export const getRemoveBucketAliasMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeBucketAlias>>,
    TError,
    { data: RemoveBucketAliasRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeBucketAlias>>,
  TError,
  { data: RemoveBucketAliasRequest },
  TContext
> => {
  const mutationKey = ['removeBucketAlias']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeBucketAlias>>,
    { data: RemoveBucketAliasRequest }
  > = (props) => {
    const { data } = props ?? {}

    return removeBucketAlias(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RemoveBucketAliasMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeBucketAlias>>
>
export type RemoveBucketAliasMutationBody = RemoveBucketAliasRequest
export type RemoveBucketAliasMutationError = ErrorType<void>

export const useRemoveBucketAlias = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeBucketAlias>>,
      TError,
      { data: RemoveBucketAliasRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof removeBucketAlias>>,
  TError,
  { data: RemoveBucketAliasRequest },
  TContext
> => {
  const mutationOptions = getRemoveBucketAliasMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
