/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  ConnectClusterNodesRequest,
  ConnectClusterNodesResponse,
  GetClusterHealthResponse,
  GetClusterStatisticsResponse,
  GetClusterStatusResponse,
} from '../endpoints.schemas'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Instructs this Garage node to connect to other Garage nodes at specified `<node_id>@<net_address>`. `node_id` is generated automatically on node start.
 */
export const connectClusterNodes = (
  connectClusterNodesRequest: ConnectClusterNodesRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ConnectClusterNodesResponse>(
    {
      url: `/proxy/v2/ConnectClusterNodes`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: connectClusterNodesRequest,
      signal,
    },
    options,
  )
}

export const getConnectClusterNodesMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof connectClusterNodes>>,
    TError,
    { data: ConnectClusterNodesRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof connectClusterNodes>>,
  TError,
  { data: ConnectClusterNodesRequest },
  TContext
> => {
  const mutationKey = ['connectClusterNodes']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof connectClusterNodes>>,
    { data: ConnectClusterNodesRequest }
  > = (props) => {
    const { data } = props ?? {}

    return connectClusterNodes(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ConnectClusterNodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof connectClusterNodes>>
>
export type ConnectClusterNodesMutationBody = ConnectClusterNodesRequest
export type ConnectClusterNodesMutationError = ErrorType<void>

export const useConnectClusterNodes = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof connectClusterNodes>>,
      TError,
      { data: ConnectClusterNodesRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof connectClusterNodes>>,
  TError,
  { data: ConnectClusterNodesRequest },
  TContext
> => {
  const mutationOptions = getConnectClusterNodesMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Returns the global status of the cluster, the number of connected nodes (over the number of known ones), the number of healthy storage nodes (over the declared ones), and the number of healthy partitions (over the total).
 */
export const getClusterHealth = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetClusterHealthResponse>(
    { url: `/proxy/v2/GetClusterHealth`, method: 'GET', signal },
    options,
  )
}

export const getGetClusterHealthQueryKey = () => {
  return [`/proxy/v2/GetClusterHealth`] as const
}

export const getGetClusterHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getClusterHealth>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getClusterHealth>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetClusterHealthQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClusterHealth>>
  > = ({ signal }) => getClusterHealth(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClusterHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClusterHealth>>
>
export type GetClusterHealthQueryError = ErrorType<unknown>

export function useGetClusterHealth<
  TData = Awaited<ReturnType<typeof getClusterHealth>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHealth>>,
          TError,
          Awaited<ReturnType<typeof getClusterHealth>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterHealth<
  TData = Awaited<ReturnType<typeof getClusterHealth>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterHealth>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterHealth>>,
          TError,
          Awaited<ReturnType<typeof getClusterHealth>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterHealth<
  TData = Awaited<ReturnType<typeof getClusterHealth>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterHealth>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetClusterHealth<
  TData = Awaited<ReturnType<typeof getClusterHealth>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterHealth>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetClusterHealthQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * 
Fetch global cluster statistics.

*Note: do not try to parse the `freeform` field of the response, it is given as a string specifically because its format is not stable.*
    
 */
export const getClusterStatistics = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetClusterStatisticsResponse>(
    { url: `/proxy/v2/GetClusterStatistics`, method: 'GET', signal },
    options,
  )
}

export const getGetClusterStatisticsQueryKey = () => {
  return [`/proxy/v2/GetClusterStatistics`] as const
}

export const getGetClusterStatisticsQueryOptions = <
  TData = Awaited<ReturnType<typeof getClusterStatistics>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getClusterStatistics>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetClusterStatisticsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClusterStatistics>>
  > = ({ signal }) => getClusterStatistics(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClusterStatistics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClusterStatistics>>
>
export type GetClusterStatisticsQueryError = ErrorType<void>

export function useGetClusterStatistics<
  TData = Awaited<ReturnType<typeof getClusterStatistics>>,
  TError = ErrorType<void>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterStatistics>>,
          TError,
          Awaited<ReturnType<typeof getClusterStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterStatistics<
  TData = Awaited<ReturnType<typeof getClusterStatistics>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatistics>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterStatistics>>,
          TError,
          Awaited<ReturnType<typeof getClusterStatistics>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterStatistics<
  TData = Awaited<ReturnType<typeof getClusterStatistics>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetClusterStatistics<
  TData = Awaited<ReturnType<typeof getClusterStatistics>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatistics>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetClusterStatisticsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * 
Returns the cluster's current status, including:

- ID of the node being queried and its version of the Garage daemon
- Live nodes
- Currently configured cluster layout
- Staged changes to the cluster layout

*Capacity is given in bytes*
    
 */
export const getClusterStatus = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetClusterStatusResponse>(
    { url: `/proxy/v2/GetClusterStatus`, method: 'GET', signal },
    options,
  )
}

export const getGetClusterStatusQueryKey = () => {
  return [`/proxy/v2/GetClusterStatus`] as const
}

export const getGetClusterStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getClusterStatus>>,
  TError = ErrorType<void>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getClusterStatus>>, TError, TData>
  >
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetClusterStatusQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClusterStatus>>
  > = ({ signal }) => getClusterStatus(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClusterStatus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetClusterStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClusterStatus>>
>
export type GetClusterStatusQueryError = ErrorType<void>

export function useGetClusterStatus<
  TData = Awaited<ReturnType<typeof getClusterStatus>>,
  TError = ErrorType<void>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterStatus>>,
          TError,
          Awaited<ReturnType<typeof getClusterStatus>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterStatus<
  TData = Awaited<ReturnType<typeof getClusterStatus>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatus>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClusterStatus>>,
          TError,
          Awaited<ReturnType<typeof getClusterStatus>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetClusterStatus<
  TData = Awaited<ReturnType<typeof getClusterStatus>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatus>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetClusterStatus<
  TData = Awaited<ReturnType<typeof getClusterStatus>>,
  TError = ErrorType<void>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClusterStatus>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetClusterStatusQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
