/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Garage administration API
 * Administrate your Garage cluster programatically, including status, layout, keys, buckets, and maintainance tasks.

*Disclaimer: This API may change in future Garage versions. Read the changelog and upgrade your scripts before upgrading. Additionnaly, this specification is early stage and can contain bugs, so be careful and please report any issues on our issue tracker.*
 * OpenAPI spec version: v2.0.0
 */

import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query'
import { useMutation } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type {
  BucketKeyPermChangeRequest,
  GetBucketInfoResponse,
} from '../endpoints.schemas'

/**
 * 
⚠️ **DISCLAIMER**: Garage's developers are aware that this endpoint has an unconventional semantic. Be extra careful when implementing it, its behavior is not obvious.

Allows a key to do read/write/owner operations on a bucket.

Flags in permissions which have the value true will be activated. Other flags will remain unchanged (ie. they will keep their internal value).

For example, if you set read to true, the key will be allowed to read the bucket.
If you set it to false, the key will keeps its previous read permission.
If you want to disallow read for the key, check the DenyBucketKey operation.
    
 */
export const allowBucketKey = (
  bucketKeyPermChangeRequest: BucketKeyPermChangeRequest,
  signal?: AbortSignal,
) => {
  return customInstance<GetBucketInfoResponse>({
    url: `/proxy/v2/AllowBucketKey`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: bucketKeyPermChangeRequest,
    signal,
  })
}

export const getAllowBucketKeyMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof allowBucketKey>>,
    TError,
    { data: BucketKeyPermChangeRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof allowBucketKey>>,
  TError,
  { data: BucketKeyPermChangeRequest },
  TContext
> => {
  const mutationKey = ['allowBucketKey']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof allowBucketKey>>,
    { data: BucketKeyPermChangeRequest }
  > = (props) => {
    const { data } = props ?? {}

    return allowBucketKey(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type AllowBucketKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof allowBucketKey>>
>
export type AllowBucketKeyMutationBody = BucketKeyPermChangeRequest
export type AllowBucketKeyMutationError = ErrorType<void>

export const useAllowBucketKey = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof allowBucketKey>>,
      TError,
      { data: BucketKeyPermChangeRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof allowBucketKey>>,
  TError,
  { data: BucketKeyPermChangeRequest },
  TContext
> => {
  const mutationOptions = getAllowBucketKeyMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * 
⚠️ **DISCLAIMER**: Garage's developers are aware that this endpoint has an unconventional semantic. Be extra careful when implementing it, its behavior is not obvious.

Denies a key from doing read/write/owner operations on a bucket.

Flags in permissions which have the value true will be deactivated. Other flags will remain unchanged.

For example, if you set read to true, the key will be denied from reading.
If you set read to false,  the key will keep its previous permissions.
If you want the key to have the reading permission, check the AllowBucketKey operation.
    
 */
export const denyBucketKey = (
  bucketKeyPermChangeRequest: BucketKeyPermChangeRequest,
  signal?: AbortSignal,
) => {
  return customInstance<GetBucketInfoResponse>({
    url: `/proxy/v2/DenyBucketKey`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: bucketKeyPermChangeRequest,
    signal,
  })
}

export const getDenyBucketKeyMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof denyBucketKey>>,
    TError,
    { data: BucketKeyPermChangeRequest },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof denyBucketKey>>,
  TError,
  { data: BucketKeyPermChangeRequest },
  TContext
> => {
  const mutationKey = ['denyBucketKey']
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof denyBucketKey>>,
    { data: BucketKeyPermChangeRequest }
  > = (props) => {
    const { data } = props ?? {}

    return denyBucketKey(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type DenyBucketKeyMutationResult = NonNullable<
  Awaited<ReturnType<typeof denyBucketKey>>
>
export type DenyBucketKeyMutationBody = BucketKeyPermChangeRequest
export type DenyBucketKeyMutationError = ErrorType<void>

export const useDenyBucketKey = <TError = ErrorType<void>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof denyBucketKey>>,
      TError,
      { data: BucketKeyPermChangeRequest },
      TContext
    >
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof denyBucketKey>>,
  TError,
  { data: BucketKeyPermChangeRequest },
  TContext
> => {
  const mutationOptions = getDenyBucketKeyMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
