/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useQuery } from '@tanstack/react-query'
import type { ErrorType } from '../../../../axios-instance'

import { customInstance } from '../../../../axios-instance'
import type { MetaInfoResponse } from '../endpoints.schemas'

export const getMetaInfo = (signal?: AbortSignal) => {
  return customInstance<MetaInfoResponse>({
    url: `/api/meta/info`,
    method: 'GET',
    signal,
  })
}

export const getGetMetaInfoQueryKey = () => {
  return [`/api/meta/info`] as const
}

export const getGetMetaInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetaInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMetaInfo>>, TError, TData>
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetMetaInfoQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetaInfo>>> = ({
    signal,
  }) => getMetaInfo(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMetaInfo>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMetaInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMetaInfo>>
>
export type GetMetaInfoQueryError = ErrorType<unknown>

export function useGetMetaInfo<
  TData = Awaited<ReturnType<typeof getMetaInfo>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMetaInfo>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetaInfo>>,
          TError,
          Awaited<ReturnType<typeof getMetaInfo>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetMetaInfo<
  TData = Awaited<ReturnType<typeof getMetaInfo>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMetaInfo>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMetaInfo>>,
          TError,
          Awaited<ReturnType<typeof getMetaInfo>>
        >,
        'initialData'
      >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetMetaInfo<
  TData = Awaited<ReturnType<typeof getMetaInfo>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMetaInfo>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}

export function useGetMetaInfo<
  TData = Awaited<ReturnType<typeof getMetaInfo>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMetaInfo>>, TError, TData>
    >
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetMetaInfoQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
